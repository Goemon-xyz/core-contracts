// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

import "forge-std/Test.sol";
import "../src/UserManager.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "permit2/src/interfaces/IPermit2.sol";
import "forge-std/console.sol";
import {ERC1967Proxy} from "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol";


contract UserManagerTest is Test {
    UserManager public userManager;
    IERC20 public usdc;
    IERC20 public ptUsde;
    IPermit2 public permit2;
    address public user1;
    uint256 public user1PrivateKey;
    address public powerTrade;
    ERC1967Proxy public userManagerProxy;

    address public constant wstETHAddress = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;
    address public constant usdeAddress = 0x4c9EDD5852cd905f086C759E8383e09bff1E68B3;
    address public constant usdcAddress = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;
    address public constant ptUsdeAddress = 0x8A47b431A7D947c6a3ED6E42d501803615a97EAa;

    bytes transactionData = hex"594a88cc0000000000000000000000001ad0ae8e1dbe78c7313cb8234c3f753adb088a15000000000000000000000000b451a36c8b6b2eac77ad0737ba732818143a0e250000000000000000000000000000000000000000000000056bc75e2d6310000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000a60000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000005bfea7c0000000000000000000000004c9edd5852cd905f086c759e8383e09bff1e68b30000000000000000000000001e8b6ac39f8a33f46a6eb2d1acd1047b99180ad100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b5000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000864e21fd0e900000000000000000000000000000000000000000000000000000000000000200000000000000000000000000f4a1d7fdf4890be35e71f3e0bbc4a0ec377eca3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000005e000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000004c9edd5852cd905f086c759e8383e09bff1e68b3000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000000000007fffffff00000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004063407a490000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000f4a1d7fdf4890be35e71f3e0bbc4a0ec377eca3000000000000000000000000e6d7ebb9f1a9519dc06d557e03c522d53520e76a0000000000000000000000004c9edd5852cd905f086c759e8383e09bff1e68b3000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000555581e77a2adb72e00000000000000000000000000000000000000000000000000000001000276a4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000006200000000000000000000000005ddf47f0000000000000000000000004c9edd5852cd905f086c759e8383e09bff1e68b3000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f94600000000000000000000000000000000000000000000000555581e77a2adb72e0000000000000000000000000000000000000000000000000000000005bfea7c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000f4a1d7fdf4890be35e71f3e0bbc4a0ec377eca3000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000555581e77a2adb72e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002237b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a2239382e3330323939383830353838343136222c22416d6f756e744f7574555344223a2239382e3339313631393638393931363338222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a223938343332313237222c2254696d657374616d70223a313733393632323131382c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a22556b6f7757586f634c564772307634355572346c526d552f42554a4e61646157516452502b63633978634370626545566e72776333626a755a316f52496430524930733666765973436a47644d332b514d77614973334a7758416c4e41526f656133583137384d55374e666139587352647067344e5970506c426d52565237332f6f3338586b4d423343534432565a642f6466746b435738505a416d33386d72795747646a33476a6b516e527a4e3459372b3136664c647a7a386961346a5a3645592f444e695077426e534a79734f46355a2b39516a6d443662483671394f70664453366b72672f49654b4a68334f534758634d704b6542676579554c38397249633246743475734146786458747a39784b6647345734674864427747414e4d6f716c664350524e305a76554e6a6731382b2f4d575776314463747567593852446c6233343349307a534963703036565566465456413d3d227d7d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    address to = 0x888888888889758F76e7103c6CbF23ABbF58F946;

    // bytes kyberTransactionData = hex"8af033fb0000000000000000000000000f4a1d7fdf4890be35e71f3e0bbc4a0ec377eca3000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000640000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000004c9edd5852cd905f086c759e8383e09bff1e68b30000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000001ad0ae8e1dbe78c7313cb8234c3f753adb088a1500000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000de3355501ea1879000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000006794effb000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000000010000000000000000000000001e496fae4613b4e9c4f8fc31826812cdcbd03a90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040593611990000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001000000000000000000000000001e496fae4613b4e9c4f8fc31826812cdcbd03a90000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000004c9edd5852cd905f086c759e8383e09bff1e68b30000000000000000000000000f4a1d7fdf4890be35e71f3e0bbc4a0ec377eca30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000200000000000000000000000e93a344a0000000000000000000de6c4605e2b29ab000000000000000000000000000000000000000000000000000000000000022a7b22536f75726365223a22222c22416d6f756e74496e555344223a22312e30303031343934333132323238313132222c22416d6f756e744f7574555344223a22312e30303233313934323433323133323635222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a2231303031373033383835333132333035353739222c2254696d657374616d70223a313733373831323831312c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a22564751322f573547776b76792f4a7445444e50622b77596534677a315058635a5a324d36552f776c512b5675774e70595530633076483056322b35473752324e745737505771465871384130465264445548494645323163427142744d4139446c7556423257445868714d62713273516b424e754a627145375239466f6d556b6f65702b6f65697479316e47554f733943696b464a785532624e617842704e55545a42375645394c4353512f6f2f434731452b53427478767976653134324878374868454c336c357463636d37337556724d55302b63772b564d694e4562704874437454332b48532b7863706e46645a50706f504546725244327a31786962547a7843394b734e665a636d353059526b47586e642f686c785a63354c47485547556b3151754138544d344930387a4d714a6c572f6e366b45525a6c6d734c76696153675064414c765061764d6d514d44432b4e4c44413d3d227d7d00000000000000000000000000000000000000000000";
    // address kyberRouter = 0x6131B5fae19EA4f9D964eAc0408E4408b66337b5;
    // Type hashes for EIP-712
    bytes32 constant _TOKEN_PERMISSIONS_TYPEHASH = keccak256(
        "TokenPermissions(address token,uint256 amount)"
    );
    
    bytes32 constant _PERMIT_BATCH_TRANSFER_FROM_TYPEHASH = keccak256(
        "PermitBatchTransferFrom(TokenPermissions[] permitted,address spender,uint256 nonce,uint256 deadline)TokenPermissions(address token,uint256 amount)"
    );

    function setUp() public {
        vm.createSelectFork("http://localhost:8545");
        UserManager implementation = new UserManager();
        // Use USDC mainnet address
        usdc = IERC20(usdcAddress);
        ptUsde = IERC20(ptUsdeAddress);
        permit2 = IPermit2(address(0x000000000022D473030F116dDEE9F6B43aC78BA3));

        // Create account with private key
        user1PrivateKey = 0xA11CE;
        user1 = vm.addr(user1PrivateKey);
        powerTrade = vm.addr(0xC0FFEE);

        // Deploy UserManager
        // Encode initialization data
        bytes memory initData = abi.encodeWithSelector(
            UserManager.initialize.selector,
            usdcAddress,
            powerTrade,
            address(0x000000000022D473030F116dDEE9F6B43aC78BA3) // Permit2 address
        );

        // Deploy proxy
        userManagerProxy = new ERC1967Proxy(
            address(implementation),
            initData
        );

        userManager = UserManager(address(userManagerProxy));

        // Simulate transferring wstETHAddress to user1
        deal(wstETHAddress, address(this), 1e19);
        deal(usdeAddress, address(this), 100000 * 10 ** 18);
        deal(usdeAddress, user1, 100000 * 10 ** 18);
        deal(usdcAddress, address(this), 1e10);
        deal(usdcAddress, user1, 1e10);
        deal(ptUsdeAddress, user1, 1e29);
    }

    function _getPermitTypedDataHash(
        ISignatureTransfer.PermitTransferFrom memory permit,
        address spender
    )
        internal
        view
        returns (bytes32)
    {
        bytes32 PERMIT_TRANSFER_FROM_TYPEHASH = keccak256(
            "PermitTransferFrom(TokenPermissions permitted,address spender,uint256 nonce,uint256 deadline)TokenPermissions(address token,uint256 amount)"
        );

        bytes32 tokenPermissionsHash = keccak256(
            abi.encode(
                keccak256("TokenPermissions(address token,uint256 amount)"),
                permit.permitted.token,
                permit.permitted.amount
            )
        );

        bytes32 structHash = keccak256(
            abi.encode(PERMIT_TRANSFER_FROM_TYPEHASH, tokenPermissionsHash, spender, permit.nonce, permit.deadline)
        );

        bytes32 DOMAIN_SEPARATOR = permit2.DOMAIN_SEPARATOR();

        return keccak256(abi.encodePacked("\x19\x01", DOMAIN_SEPARATOR, structHash));
    }

    function testPermitDeposit() public {
        uint256 amount = 1000 * 10 ** 6; // USDC has 6 decimals
        uint256 deadline = block.timestamp + 1 hours;
        uint256 nonce = 0;

        ISignatureTransfer.PermitTransferFrom memory permit = ISignatureTransfer.PermitTransferFrom({
            permitted: ISignatureTransfer.TokenPermissions({ token: address(usdc), amount: amount }),
            nonce: nonce,
            deadline: deadline
        });

        bytes32 digest = _getPermitTypedDataHash(permit, address(userManager));

        (uint8 v, bytes32 r, bytes32 s) = vm.sign(user1PrivateKey, digest);
        bytes memory signature = abi.encodePacked(r, s, v);

        // Retrieve the address from the signature
        address recoveredAddress = ecrecover(digest, v, r, s);
        console.log("Expected user address for PermitDeposit:", user1);
        console.log("Recovered address from signature for PermitDeposit:", recoveredAddress);

        bytes memory permitTransferFrom = abi.encode(address(usdc), amount);

        vm.startPrank(user1);
        usdc.approve(address(permit2), type(uint256).max);
        userManager.permitDeposit(amount, deadline, nonce, permitTransferFrom, signature);
        vm.stopPrank();

        uint256 powerTradeBalance = usdc.balanceOf(powerTrade);
        assertEq(powerTradeBalance, amount, "PowerTrade balance should increase by deposit amount");
    }

    function testPermitCalldataExecutor() public {
    uint256 amount = 100 * 10 ** 18;
    uint256 deadline = block.timestamp + 1 hours;
    uint256 nonce = 0;

    ISignatureTransfer.PermitTransferFrom memory permit = ISignatureTransfer.PermitTransferFrom({
        permitted: ISignatureTransfer.TokenPermissions({ token: address(ptUsdeAddress), amount: amount }),
        nonce: nonce,
        deadline: deadline
    });

    bytes32 digest = _getPermitTypedDataHash(permit, address(userManager));
    (uint8 v, bytes32 r, bytes32 s) = vm.sign(user1PrivateKey, digest);
    bytes memory signature = abi.encodePacked(r, s, v);

    bytes memory permitTransferFrom = abi.encode(address(ptUsdeAddress), amount);

    // Check initial balances
    uint256 initialUserBalance = ptUsde.balanceOf(user1);
    // uint256 initialTargetBalance = usdc.balanceOf(user1);
    console.log("Initial user balance:", initialUserBalance);
    require(initialUserBalance >= amount, "Insufficient ERC20 balance");
    
    vm.startPrank(user1);
    ptUsde.approve(address(permit2), type(uint256).max);
    userManager.permitCalldataExecutor(
        address(ptUsde),
        amount,
        deadline,
        nonce,
        permitTransferFrom,
        signature,
        transactionData,
        to
    );
    vm.stopPrank();

    // Verify balance changes
    assertEq(ptUsde.balanceOf(user1), initialUserBalance - amount, "User balance should decrease");
    // assertEq(usdc.balanceOf(user1), initialTargetBalance + amount, "Target balance should increase");
    
    // ... existing allowance checks ...
}
}